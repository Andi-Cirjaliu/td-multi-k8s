#Clone the Ingress controller repo and change into the deployments folder
git clone https://github.com/nginxinc/kubernetes-ingress/
cd kubernetes-ingress/deployments
git checkout v1.9.1

1. Configure RBAC

#Create a namespace and a service account for the Ingress controller:
kubectl apply -f common/ns-and-sa.yaml

#Create a cluster role and cluster role binding for the service account:
kubectl apply -f rbac/rbac.yaml

2. Create Common Resources

#Create a secret with a TLS certificate and a key for the default server in NGINX:
kubectl apply -f common/default-server-secret.yaml

#Create a config map for customizing NGINX configuration:
kubectl apply -f common/nginx-config.yaml

#Create an IngressClass resource (for Kubernetes >= 1.18)
kubectl apply -f common/ingress-class.yaml

#Create custom resource definitions for VirtualServer and VirtualServerRoute, TransportServer and Policy resources:
kubectl apply -f common/vs-definition.yaml
kubectl apply -f common/vsr-definition.yaml
kubectl apply -f common/ts-definition.yaml
kubectl apply -f common/policy-definition.yaml

#If you would like to use the TCP and UDP load balancing features of the Ingress Controller, create the following additional resources:

#Create a custom resource definition for GlobalConfiguration resource:
kubectl apply -f common/gc-definition.yaml

#Create a GlobalConfiguration resource:
kubectl apply -f common/global-configuration.yaml

3. Deploy the Ingress Controller

3.1 Run the Ingress Controller

#Use a Deployment. When you run the Ingress Controller by using a Deployment, by default, Kubernetes will create one Ingress controller pod.
kubectl apply -f deployment/nginx-ingress.yaml

#Use a DaemonSet: When you run the Ingress Controller by using a DaemonSet, Kubernetes will create an Ingress controller pod on every node of the cluster.
kubectl apply -f daemon-set/nginx-ingress.yaml


3.2 Check that the Ingress Controller is Running
Run the following command to make sure that the Ingress controller pods are running:

kubectl get pods --namespace=nginx-ingress

4. Get Access to the Ingress Controller
If you created a daemonset, ports 80 and 443 of the Ingress controller container are mapped to the same ports of the node where the container is running. To access the Ingress controller, use those ports and an IP address of any node of the cluster where the Ingress controller is running.

If you created a deployment, below are two options for accessing the Ingress controller pods.

4.1 Create a Service for the Ingress Controller Pods
Use a NodePort service.

Create a service with the type NodePort:

$ kubectl create -f service/nodeport.yaml

Use a LoadBalancer service:

1. Create a service using a manifest for your cloud provider:

For GCP or Azure, run:

$ kubectl apply -f service/loadbalancer.yaml

2. Use the public IP of the load balancer to access the Ingress controller. To get the public IP:

For GCP or Azure, run:

$ kubectl get svc nginx-ingress --namespace=nginx-ingress


Uninstall the Ingress Controller

1. Delete the nginx-ingress namespace to uninstall the Ingress controller along with all the auxiliary resources that were created:

$ kubectl delete namespace nginx-ingress

2. Delete the ClusterRole and ClusterRoleBinding created in that step:

$ kubectl delete clusterrole nginx-ingress
$ kubectl delete clusterrolebinding nginx-ingress